{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;AAAkC;;AAElC,iEAAe;AACf;AACA;AACA,iBAAiB,+CAAM;AACvB,iBAAiB,+CAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACbA,YAAY,cAAc;AACa;;AAEvC;AACA;AACA,wBAAwB;AACxB,wBAAwB;;AAExB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,oBAAoB,QAAQ;;AAE5B,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,oDAAW;AACvB;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAOE;;;;;;;;;;;;;;;;;;;AClLkC;AACQ;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;;AAET;AACA;;AAEA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;AACA,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,yDAAa;AAC1E;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAMC;;;;;;;;;;;;;;;ACnED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;;;;;;;;UCnBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA,YAAY,aAAa;AACiD;AACjC;AACF;;AAEvC,yDAAW;AACX;;AAEA,mBAAmB,oDAAW;AAC9B,mBAAmB,oDAAW;;AAE9B,iBAAiB,qDAAS;AAC1B,iBAAiB,qDAAS;;AAE1B,uDAAW;AACX,uDAAW;;AAEX,+DAAmB;AACnB,+DAAmB","sources":["webpack://battleship/./src/game-manager.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ships.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["import { player } from \"./player\";\n\nexport default () => {\n    \n    return {\n        player1: player(document.getElementById(\"player1-controls\")),\n        player2: player(document.getElementById(\"player2-controls\")),\n        initialize: function () {\n            console.log(this.player1)\n            this.player1.initialize();\n            this.player2.initialize();\n        }\n    };\n}","// import { createShips } from \"./player\";\nimport { renderShips } from \"./player\";\n\nlet gameBoard = () => {\n    return {\n        player1Board: {},\n        player2Board: {},\n\n        myBoard: [],\n        enemyBoard: [],\n\n        recieveAttack: function (player, row, column) {\n            //which board is being used//\n            let board = player === 1 ? this.player1Board : this.player2Board\n            //check if a shot has been fired//\n            //if shot has been fired already there then do nothing//\n            let alreadyFired = this.shotFired(player, row, column);\n            if (alreadyFired === null) {\n                return;\n            }\n            //record value of shot in gameboard for player//\n            if (!board[row]) {\n                board[row] = {}\n            }\n        },\n\n        shotFired: function (player, row, column) {\n            //if player = 1 ?(is true/false) true take option 1 and false take option 2//\n            let board = player === 1 ? this.player1Board : this.player2Board\n            // longer way to write it\n            // let board;\n            // if (player === 1) {\n            //     board = this.player1Board;\n            // } else {\n            //     board = this.player2Board;\n            // }\n            if (board[row]) {\n                if (board[row][column]) {\n                    let value = board[row][column];\n                    return value;\n                }\n            }\n            return null;\n        }\n    };\n}\n\nlet createTile = (gridTile, row, column) => {\n    return {\n        //tile is the element tile in the DOM created for the grid (it's what you hover over)//\n        tile: gridTile,\n        //isHit represents whether shot was fired and is a hit//\n        isHit: false,\n        //isMiss represents whether shot was fired and is a miss//\n        isMiss: false,\n        //ship is the ship object if the ship is in the tile//\n        ship: null,\n        //row is the x coord//\n        row: row,\n        //column is the y coord//\n        column: column,\n    };\n\n}\n\nfunction createGrids(gridElement, gameBoardObject) {\n\n    for (let r = 0; r < 10; r++) {\n\n        for (let c = 0; c < 10; c++) {\n            let tile = document.createElement(\"div\");\n            tile.classList.add(\"tile\");\n            gridElement.appendChild(tile);\n            let myGridTile = createTile(tile, r, c);\n            let enemyGridTile = createTile(tile, r, c);\n            gameBoardObject.myBoard.push(myGridTile);\n            gameBoardObject.enemyBoard.push(enemyGridTile);\n        }\n    }\n}\n\nfunction dragDropInitializer(player, ships, gameBoardObject) {\n\n    let grid;\n    let shipBank;\n\n    if (player === \"player1\") {\n        grid = document.querySelector(\"#player1-gameboard\");\n        shipBank = document.querySelector(\"#ship-options1\")\n    } else if (player === \"player2\") {\n        grid = document.querySelector(\"#player2-gameboard\");\n        shipBank = document.querySelector(\"#ship-options2\");\n    }\n\n    let tiles = grid.querySelectorAll(\".tile\");\n\n    tiles.forEach((tile, tileIndex) => {\n        tile.addEventListener(\"dragover\", (e) => gridHoverOver(e));\n        tile.addEventListener(\"dragleave\", (e) => gridLeaveHover(e));\n\n        tile.addEventListener(\"drop\", (event) => {\n            console.log(\"drop\");\n            event.preventDefault();\n            shipDrop(event, tileIndex, getShip(event, ships), gameBoardObject);\n            renderShips(shipBank, ships);\n            \n        })\n    })\n}\n\n// function createShips(element) {\n//     let ships = [\n//         createShip(\"Carrier\", 5),\n//         createShip(\"Battleship\", 4),\n//         createShip(\"Submarine\", 3),\n//         createShip(\"Destroyer\", 3),\n//         createShip(\"Patrol Boat\", 2),\n//     ]\n//     renderShips(element, ships);\n//     return ships;\n// }\n\n// function renderShips(element, ships) {\n//     element.innerHTML = \"\";\n\n//     ships.forEach((ship, shipIndex) => {\n//         if (ship.shipPlaced === false) {\n//             let shipElement = document.createElement(\"div\");\n//             shipElement.innerText = ship.shipName;\n//             shipElement.classList.add(\"ship-element\");\n//             element.appendChild(shipElement);\n//             shipElement.setAttribute('draggable', true);\n//             shipElement.addEventListener(\"dragstart\", (e) => shipDragStart(e, shipIndex));\n//         }\n//     })\n// }\n\nfunction shipDragStart(e, shipIndex) {\n    console.log(\"dragstart\");\n    console.log(shipIndex);\n    e.dataTransfer.clearData();\n    // e.dataTransfer.setData(\"text/plain\", e.shipElement);\n    e.dataTransfer.setData(\"ship\", shipIndex);\n}\n\nfunction shipDrop(e, tileIndex, ship, gameBoardObject) {\n    // console.log(ship);\n    // console.log(gameBoardObject);\n    let tileObject = gameBoardObject.myBoard[tileIndex];\n    console.log(tileObject);\n    tileObject.ship = ship;\n    ship.shipPlaced = true;\n    tileObject.tile.classList.add(\"ship-here\");\n}\n\nfunction gridHoverOver(e) {\n    e.preventDefault();\n    let element = e.target;\n    element.classList.add(\"ship-hover-marker\");\n}\n\nfunction gridLeaveHover(e) {\n    e.preventDefault();\n    let element = e.target;\n    element.classList.remove(\"ship-hover-marker\");\n}\n\nfunction getShip(e, ships) {\n    //get data called ship, expect ship to be a number(index) and this number represents where in the array the ship is and it will return the ship object//\n    let shipIndex = e.dataTransfer.getData(\"ship\");\n    return ships[parseInt(shipIndex)];\n}\n\nexport {\n    gameBoard,\n    createGrids,\n    dragDropInitializer,\n    shipDragStart,\n};\n","import { createShip } from \"./ships\"\nimport { shipDragStart } from \"./gameboard\";\n\nlet player = (rootElement) => {\n    return {\n        root: rootElement,\n        orientation: \"Horizontal\",\n        flipOrientation: function () {\n            if (this.orientation === \"Horizontal\") {\n                this.orientation = \"Vertical\";\n            } else {\n                this.orientation = \"Horizontal\";\n            }\n        },\n\n        initialize: function () {\n            this.bindOrientationButton();\n\n        },\n\n        bindOrientationButton: function () {\n            let button = this.root.querySelector(\"#ship-orientation\");\n            button.addEventListener(\"click\", () => {\n                this.flipOrientation();\n                button.innerText = this.orientation;\n            });\n        },\n    }\n}\n\nfunction createShips(element) {\n    let ships = [\n        createShip(\"Carrier\", 5),\n        createShip(\"Battleship\", 4),\n        createShip(\"Submarine\", 3),\n        createShip(\"Destroyer\", 3),\n        createShip(\"Patrol Boat\", 2),\n    ]\n    renderShips(element, ships);\n    return ships;\n}\n\nfunction renderShips(element, ships) {\n    element.innerHTML = \"\";\n\n    ships.forEach((ship, shipIndex) => {\n        if (ship.shipPlaced === false) {\n            let shipElement = document.createElement(\"div\");\n            shipElement.innerText = ship.shipName;\n            shipElement.classList.add(\"ship-element\");\n            element.appendChild(shipElement);\n            shipElement.setAttribute('draggable', true);\n            shipElement.addEventListener(\"dragstart\", (e) => shipDragStart(e, shipIndex));\n        }\n    })\n}\n\n//computer selection//\nfunction getComputerChoice() {\n    let computerSelection = Math.floor(Math.random() * 100);\n    // return choices[computerSelection];\n}\n\nexport { \n    player,\n    createShips,\n    renderShips,\n}\n","//create the ship factory function//\n//all boats start with 0 hits and are floating//\nlet createShip = (name, length, row, column, hits = 0) => {\n   return {\n      shipName: name,\n      shipLength: length,\n      shipRow: row,\n      shipColumn: column,\n      shipPlaced: false,\n      shipHits: hits,\n      hit: function () {\n         if (this.shipHits + 1 <= this.shipLength) {\n            this.shipHits++\n         }\n      },\n      isSunk: function () {\n         return this.shipHits >= this.shipLength\n      },\n   };\n}\n\nexport { createShip }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import { createShip } from \"./ships\";\nimport { createGrids, dragDropInitializer, gameBoard } from \"./gameboard\";\nimport gameManager from \"./game-manager\";\nimport { createShips } from \"./player\";\n\ngameManager()\n    .initialize();\n\nlet player1Ships = createShips(document.getElementById(\"ship-options1\"));\nlet player2Ships = createShips(document.getElementById(\"ship-options2\"));\n\nlet gameBoard1 = gameBoard();\nlet gameBoard2 = gameBoard();\n\ncreateGrids(document.getElementById(\"player1-gameboard\"), gameBoard1);\ncreateGrids(document.getElementById(\"player2-gameboard\"), gameBoard2);\n\ndragDropInitializer(\"player1\", player1Ships, gameBoard1);\ndragDropInitializer(\"player2\", player2Ships, gameBoard2);\n\n\n"],"names":[],"sourceRoot":""}