{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;AAAkC;AACG;AACS;;AAE9C;;AAEA,iEAAe;AACf;AACA;AACA;;AAEA;AACA,iBAAiB,+CAAM;AACvB,iBAAiB,+CAAM;AACvB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;AAKD,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzG2B;AACF;AACrC,YAAY,YAAY;AACxB,YAAY,SAAS;AACoB;;AAEzC;AACA;AACA,2BAA2B;AAC3B,2BAA2B;;AAE3B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,oBAAoB,QAAQ;;AAE5B,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yDAAW;AAChC;AACA;AACA;AACA,kBAAkB;AAClB,oBAAoB,yDAAW;AAC/B;AACA;AACA;AACA;;AAEA,aAAa;AACb;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAOE;;;;;;;;;;;;;;;;;;AC/HkC;AACuB;AAClB;;;AAGzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2DAAe;AAClC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,YAAY,uDAAW;AACvB;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA,8CAA8C,gBAAgB;AAC9D,SAAS;;AAET;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,gBAAgB,0DAAW;AAC3B;AACA,SAAS;;;AAGT;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,UAAU,UAAU,SAAS,UAAU,QAAQ;AACvF;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,SAAS;;;;AAIT;AACA;AACA,gBAAgB,kDAAU;AAC1B,gBAAgB,kDAAU;AAC1B,gBAAgB,kDAAU;AAC1B,gBAAgB,kDAAU;AAC1B,gBAAgB,kDAAU;AAC1B;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;AAMC;;;;;;;;;;;;;;;AC3RD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;;;;;;;;UCpBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA,YAAY,aAAa;AACuD;AACvC;AACF;AACC;AACxC,YAAY,UAAU;;AAEtB,yDAAW;AACX;;AAEA,qDAAS","sources":["webpack://battleship/./src/game-manager.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ships.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["import { player } from \"./player\";\nimport { createShip } from \"./ships\";\nimport { createGameBoard } from \"./gameboard\";\n\nlet instance = null;\n\nexport default () => {\n    if (instance !== null) {\n        return instance;\n    }\n\n    instance = {\n        player1: player(document.getElementById(\"player1-controls\"), \"player1\"),\n        player2: player(document.getElementById(\"player2-controls\"), \"player2\"),\n        turn: 2,\n        playerVsAI: false,\n\n\n        initialize: function () {\n            this.player1.initialize();\n            this.player2.initialize();\n            document.querySelector(\"#player-vs-computer\").addEventListener(\"click\", () => this.playerVsAI = true);\n            document.querySelector(\"#player-vs-player\").addEventListener(\"click\", () => this.playerVsAI = false);\n        },\n\n        alternateTurns: function () {\n            if (this.turn === 1) {\n                this.turn = 2;\n\n            } else {\n                this.turn = 1;\n                if (this.playerVsAI === true) {\n                    computerSelection();\n                }\n            }\n        },\n\n        turnOrder: function (playerObject) {\n            if (this.turn === 1) {\n                return this.player1 === playerObject;\n            } else {\n                return this.player2 === playerObject;\n            }\n        },\n\n        getPlayerTurnObject: function () {\n            if (this.turn === 1) {\n                return this.player1;\n            } else {\n                return this.player2;\n            }\n        },\n\n        recieveAttackGame: function (tileIndex, originatingPlayerGameboard) {\n\n            let player = this.getPlayerTurnObject();\n            if (player !== originatingPlayerGameboard) {\n                return;\n            }\n            player.gameBoard.recieveAttack(1, tileIndex);\n            this.alternateTurns();\n            this.allSunk();\n            // console.log(this.turn)\n        },\n\n        canStartGame: function () {\n            return !(this.player1.ships.filter(ship => ship.shipPlaced).length < 5\n                || this.player2.ships.filter(ship => ship.shipPlaced).length < 5);\n        },\n\n        hideShips: function () {\n\n            this.player1.getGameBoard().querySelectorAll(\".ship-here\").forEach(element => {\n                element.classList.remove(\"ship-here\");\n            });\n            this.player2.getGameBoard().querySelectorAll(\".ship-here\").forEach(element => {\n                element.classList.remove(\"ship-here\");\n            });\n        },\n\n        allSunk: function () {\n            let player1ShipsSunk = this.player1.ships.every((ship) => ship.isSunk())\n            let player2ShipsSunk = this.player2.ships.every((ship) => ship.isSunk())\n\n            if (player1ShipsSunk) {\n                document.querySelector(\"#instructions\").style.color = \"#ff0080\";\n                document.querySelector(\"#instructions\").innerText = \"Player 2 Wins!\";\n            } else if (player2ShipsSunk) {\n                document.querySelector(\"#instructions\").style.color = \"#ff0080\";\n                document.querySelector(\"#instructions\").innerText = \"Player 1 Wins!\";\n            }\n        },\n\n        //computer selection//\n        getComputerChoice: function () {\n            let computerSelection = Math.floor(Math.random() * 100);\n            return computerSelection;\n        }\n    };\n    return instance;\n}\n\n\n\n\n// export { startGame }\n\n\n\n\n\n\n\n","import { renderShips } from \"./player\";\nimport { createShip } from \"./ships\";\n// import { startGame } from \"./game-manager\";\n// import { player } from \"./player\";\nimport gameManager from \"./game-manager\";\n\nlet createGameBoard = () => {\n    return {\n        // player1Board: {},\n        // player2Board: {},\n\n        myBoard: [],\n        enemyBoard: [],\n\n        recieveAttack: function (player, tileIndex) {\n            //which board is being used//\n            // let board = player === 1 ? this.myBoard : this.enemyBoard\n            //check if a shot has been fired//\n            //if shot has been fired already there then do nothing//\n            // startGame();\n\n            let alreadyFired = this.shotFired(player, tileIndex);\n\n            let board = player === 1 ? this.myBoard : this.enemyBoard\n\n            let tile = board[tileIndex];\n\n            // console.log(tileIndex)\n            if (alreadyFired) {\n                return;\n            }\n            //record value of shot in gameboard for player//\n            if (tile.ship) {\n                tile.isHit = true;\n                tile.ship.hit();\n                tile.tile.classList.add(\"hit\");\n                document.querySelector(\"#instructions\").style.color = \"#FF003F\";\n                document.querySelector(\"#instructions\").innerText = \"You hit a ship!\"\n                // tile.ship.isSunk().count = 0;\n\n                if (tile.ship.isSunk()) {\n                    console.log(\"Ship is Sunk!\");\n                    console.log(tile.ship.isSunk())\n                }\n            } else {\n                tile.isMiss = true;\n                tile.tile.classList.add(\"miss\");\n                document.querySelector(\"#instructions\").style.color = \"#047fb0\";\n                document.querySelector(\"#instructions\").innerText = \"You missed the ships.\"\n            }\n        },\n        \n\n        shotFired: function (player, tileIndex) {\n            //if player = 1 ?(is true/false) true take option 1 and false take option 2//\n            let board = player === 1 ? this.myBoard : this.enemyBoard\n\n            let tile = board[tileIndex];\n\n            return tile.isHit === true || tile.isMiss === true;\n        },\n    };\n}\n\nlet createTile = (gridTile, row, column) => {\n\n    return {\n        //tile is the element tile in the DOM created for the grid (it's what you hover over)//\n        tile: gridTile,\n        //isHit represents whether shot was fired and is a hit//\n        isHit: false,\n        //isMiss represents whether shot was fired and is a miss//\n        isMiss: false,\n        //ship is the ship object if the ship is in the tile//\n        ship: null,\n        //row is the x coord//\n        row: row,\n        //column is the y coord//\n        column: column,\n    };\n\n}\n\nfunction createGrids(gridElement, gameBoardObject, player) {\n\n    for (let r = 0; r < 10; r++) {\n\n        for (let c = 0; c < 10; c++) {\n            let tile = document.createElement(\"div\");\n            tile.classList.add(\"tile\");\n            gridElement.appendChild(tile);\n            let myGridTile = createTile(tile, r, c);\n            let enemyGridTile = createTile(tile, r, c);\n            gameBoardObject.myBoard.push(myGridTile);\n            gameBoardObject.enemyBoard.push(enemyGridTile);\n            tile.addEventListener(\"click\", () => {\n                let tileIndex = (r * 10) + c;\n                if (!gameManager().canStartGame()) {\n                    document.querySelector(\"#instructions\").style.color = \"#FF4500\";\n                    document.querySelector(\"#instructions\").innerText = \"Place all ships on the boards before starting the game!\"\n                    return;\n                } else {\n                    gameManager().recieveAttackGame(tileIndex, player);\n                }\n                \n                // let clickLocation = [r, c];\n                // console.log(clickLocation)\n\n            })\n        }\n\n    }\n\n}\n\nfunction playAgain() {\n    document.querySelector(\"#play-again\").addEventListener(\"click\", function () {\n        document.location.reload();\n    })\n\n}\n\nexport {\n    createGameBoard,\n    createGrids,\n    playAgain,\n   \n};\n","import { createShip } from \"./ships\"\nimport { createGrids, createGameBoard } from \"./gameboard\";\nimport gameManager from \"./game-manager\";\n\n\nlet player = (rootElement, playerName) => {\n\n    return {\n        root: rootElement,\n        shipDragCurrent: null,\n        orientation: \"Horizontal\",\n        playerName: playerName,\n        ships: [],\n        gameBoard: createGameBoard(),\n        flipOrientation: function () {\n            if (this.orientation === \"Horizontal\") {\n                this.orientation = \"Vertical\";\n            } else {\n                this.orientation = \"Horizontal\";\n            }\n        },\n\n        initialize: function () {\n            this.bindOrientationButton();\n            this.ships = this.createShips(this.root.querySelector(\"#ship-options\"));\n            createGrids(this.getGameBoard(), this.gameBoard, this);\n            this.dragDropInitializer();\n            this.bindRandomizeShipsButton();\n        },\n\n        bindOrientationButton: function () {\n            let button = this.root.querySelector(\"#ship-orientation\");\n            button.addEventListener(\"click\", () => {\n                this.flipOrientation();\n                button.innerText = this.orientation;\n            });\n        },\n\n        bindRandomizeShipsButton: function () {\n            let button = this.root.querySelector(\".randomize-button\");\n            button.addEventListener(\"click\", () => {\n                this.randomizeShips();\n            });\n        },\n\n        getGameBoard() {\n            return document.getElementById(`${this.playerName}-gameboard`);\n        },\n\n        dragDropInitializer() {\n\n            let grid = this.getGameBoard();\n            let shipBank = this.root.querySelector(\"#ship-options\");\n\n            let tiles = grid.querySelectorAll(\".tile\");\n\n            tiles.forEach((tile, tileIndex) => {\n                tile.addEventListener(\"dragover\", (e) => {\n                    // console.log(getShip(e, ships))\n                    e.preventDefault();\n                    this.gridHoverOver(e, tileIndex, this.gameBoard);\n                });\n\n                tile.addEventListener(\"dragleave\", (e) => this.gridLeaveHover(e));\n\n                tile.addEventListener(\"drop\", (event) => {\n                    // console.log(\"drop\");\n                    event.preventDefault();\n                    this.shipDrop(event, tileIndex, this.getShip(event, this.ships));\n                    this.renderShips(shipBank, this.ships);\n                })\n            })\n        },\n\n        shipDragStart(e, shipIndex) {\n            // console.log(\"dragstart\");\n\n            e.dataTransfer.effectAllowed = \"all\";\n            e.dataTransfer.setData(\"ship\", shipIndex);\n            this.shipDragCurrent = shipIndex;\n            // console.log(shipIndex)\n        },\n\n        shipDrop(e, tileIndex, ship) {\n            if (e) {\n                e.preventDefault();\n            }\n            ship.shipPlaced = true;\n            this.getValidPlacement(tileIndex, ship, this.gameBoard).forEach((tile) => {\n                //places ship on multiple tiles, not just one tile//\n                tile.ship = ship;\n                tile.tile.classList.add(\"ship-here\");\n            })\n            let allShipsPlaced = this.ships.filter((ship) => ship.shipPlaced).length === 5;\n            if (allShipsPlaced) {\n                this.getGameBoard().querySelectorAll(\".ship-hover-marker\").forEach((element) => {\n                    element.classList.remove(\"ship-hover-marker\");\n                })\n                gameManager().hideShips();\n            }\n        },\n\n\n        randomizeShips() {\n            this.ships.forEach((ship) => {\n                let index = Math.floor(Math.random() * 100);\n                this.shipDrop(null, index, ship);\n            })\n            this.renderShips(this.root.querySelector(\"#ship-options\"), this.ships);\n\n        },\n\n        gridHoverOver(e, tileIndex, gameBoard) {\n            e.preventDefault();\n            let ship = this.ships[this.shipDragCurrent];\n\n            //this will make sure all the valid tiles are highlighted//\n            // console.log(ship)\n            this.getValidPlacement(tileIndex, ship, gameBoard).forEach((tile) => {\n                tile.tile.classList.add(\"ship-hover-marker\")\n            })\n        },\n\n        getValidPlacement(tileIndex, ship, gameBoard) {\n            let newIndex = this.getClosestIndex(tileIndex, ship);\n            return this.getValidTiles(newIndex, ship, gameBoard);\n        },\n\n        getValidTiles(tileIndex, ship, gameBoard) {\n            let tile = gameBoard.myBoard[tileIndex];\n            // console.log(tile);\n            let startIndex = tileIndex;\n            let endIndex = startIndex + ship.shipLength;\n            let offset = 0;\n            // console.log(startIndex)\n            // console.log(endIndex)\n\n            //this checks to make sure there isn't already a shipt there and wraps properly if there is//\n            if (tile.ship !== null && this.orientation === \"Horizontal\") {\n                \n            } else if (tile.ship !== null && this.orientation === \"Vertical\") {\n\n            }\n            //this checks to make sure ship isn't in a corner and wraps properly if it is//\n            if (this.orientation === \"Horizontal\") {\n                let endRow = Math.floor(endIndex / 10) / 10;\n                if (endRow > tile.row) {\n                    offset = endIndex % 10;\n                    // console.log(offset);\n                }\n                startIndex = startIndex - offset;\n                endIndex = endIndex - offset;\n\n                return gameBoard.myBoard.slice(startIndex, endIndex);\n\n            } else {\n                let returnTiles = [];\n                let startRow = Math.floor(startIndex / 10);\n                let endRow = startRow + ship.shipLength;\n                if (endRow > 10) {\n                    offset = endRow - 10;\n                    startRow = startRow - offset;\n                    endRow = endRow - offset;\n                }\n                let columnValue = startIndex % 10;\n                for (let i = 0; i < ship.shipLength; i++) {\n                    let indexToGrab = (i * 10) + (startRow * 10) + columnValue;\n                    // console.log(indexToGrab)\n                    returnTiles.push(gameBoard.myBoard[indexToGrab]);\n                }\n                return returnTiles;\n            }\n\n        },\n\n        //if ship does not fit gameboard will try to place ship in the closest location//\n        getClosestIndex(index, ship) {\n            let shipFits = false;\n            let xOffset = 0;\n            let yOffset = 0;\n            let incrementingX = true;\n            let incrementingY = true;\n            let currentFurthestX = 0;\n            let currentFurthestY = 0;\n            let direction = \"Horizontal\";\n            const maxX = 9;\n            const maxY = 100;\n            let newIndex = index;\n            while (shipFits === false) {\n                if (direction === \"Horizontal\") {\n                    if ((currentFurthestX >= Math.abs(xOffset) + 1) || (index + xOffset < 0)) {\n                        //continue will continue to loop but not do anything else within the loop for just this round and resets loop to start//\n                        direction = \"Vertical\";\n                        incrementingX = !incrementingX;\n                        continue;\n                    }\n                    xOffset = incrementingX ? xOffset +1 : xOffset -1 \n                    if (Math.abs(xOffset) >= maxX) {\n                        xOffset = incrementingX ? maxX : maxX * -1; \n                    }\n                    // let originalRow = Math.floor(index / 10);\n                    // let newRow = Math.floor((newIndex + xOffset +  ship.shipLength) / 10);\n                    // if (newRow < originalRow) {\n                    //     xOffset = (index - (originalRow * 10)) * - 1;\n                    // } else if (newRow > originalRow) {\n                    //     xOffset = (newRow * 10) -index;\n                    // }\n                    if (currentFurthestX > Math.abs(xOffset)) {\n                        currentFurthestX = Math.abs(xOffset);\n                    }\n                } else if (direction === \"Vertical\") {\n                    if ((currentFurthestY >= Math.abs(yOffset) + 1)|| (index + (yOffset * 10) < 0)) {\n                        //continue will continue to loop but not do anything else within the loop for just this round and resets loop to start//\n                        direction = \"Horizontal\";\n                        incrementingY = !incrementingY;\n                        continue;\n                    }\n                    yOffset = incrementingY ? yOffset +1 : yOffset -1 \n                    if (Math.abs(yOffset) * 10 >= maxY) {\n                        yOffset = incrementingY ? maxY : maxY * -1; \n                    }\n                    if (currentFurthestY > Math.abs(yOffset)) {\n                        currentFurthestY = Math.abs(yOffset);\n                    }\n                }\n                newIndex = (yOffset * 10) + xOffset + index;\n                console.log(`newIndex ${newIndex} xOffset ${xOffset} yOffset ${yOffset}`)\n                let tiles = this.getValidTiles(newIndex, ship, this.gameBoard);\n                shipFits = tiles.every((tile) => tile.ship === null);\n            }\n            return newIndex;\n        },\n\n        gridLeaveHover(e) {\n            e.preventDefault();\n            this.getGameBoard().querySelectorAll(\".ship-hover-marker\").forEach((element) => {\n                element.classList.remove(\"ship-hover-marker\");\n            })\n        },\n\n        getShip(e, ships) {\n            //get data called ship, expect ship to be a number(index) and this number represents where in the array the ship is and it will return the ship object//\n\n            let shipIndex = e.dataTransfer.getData(\"ship\");\n            // console.log(shipIndex)\n            return ships[parseInt(shipIndex)];\n        },\n\n\n\n        createShips(element) {\n            let ships = [\n                createShip(\"Carrier\", 5),\n                createShip(\"Battleship\", 4),\n                createShip(\"Submarine\", 3),\n                createShip(\"Destroyer\", 3),\n                createShip(\"Patrol Boat\", 2),\n            ]\n            this.renderShips(element, ships);\n            return ships;\n        },\n\n        renderShips(element, ships) {\n            element.innerHTML = \"\";\n\n            ships.forEach((ship, shipIndex) => {\n                if (ship.shipPlaced === false) {\n                    let shipElement = document.createElement(\"div\");\n                    shipElement.innerText = ship.shipName;\n                    shipElement.classList.add(\"ship-element\");\n                    element.appendChild(shipElement);\n                    shipElement.setAttribute('draggable', true);\n                    shipElement.addEventListener(\"dragstart\", (e) => this.shipDragStart(e, shipIndex));\n                }\n            })\n        },\n    }\n}\n\n\n\nexport {\n    player\n}\n","//create the ship factory function//\n//all boats start with 0 hits and are floating//\nlet createShip = (name, length, row, column, orientation = \"Horizontal\", hits = 0) => {\n   return {\n      shipName: name,\n      shipLength: length,\n      shipRow: row,\n      shipColumn: column,\n      shipPlaced: false,\n      shipOrientation: orientation,\n      shipHits: hits,\n      hit: function () {\n         if (this.shipHits + 1 <= this.shipLength) {\n            this.shipHits++\n         }\n      },\n      isSunk: function () {\n         return this.shipHits >= this.shipLength\n      },\n   };\n}\n\nexport { createShip }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import { createShip } from \"./ships\";\nimport { createGrids, dragDropInitializer, createGameBoard } from \"./gameboard\";\nimport gameManager from \"./game-manager\";\nimport { createShips } from \"./player\";\nimport { playAgain } from \"./gameboard\";\n// import { allSunk } from \"./gameboard\";\n\ngameManager()\n    .initialize();\n\nplayAgain();\n\n\n\n\n\n\n\n\n\n\n"],"names":[],"sourceRoot":""}