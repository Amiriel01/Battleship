{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;AAAkC;AACG;AACS;;AAE9C;;AAEA,iEAAe;AACf;AACA;AACA;;AAEA;AACA,iBAAiB,+CAAM;AACvB,iBAAiB,+CAAM;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,CAAC;;;;;AAKD,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;AC9E2B;AACF;AACrC,YAAY,YAAY;AACxB,YAAY,SAAS;AACoB;;AAEzC;AACA;AACA,2BAA2B;AAC3B,2BAA2B;;AAE3B;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,oBAAoB,QAAQ;;AAE5B,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yDAAW;AAChC;AACA;AACA,kBAAkB;AAClB,oBAAoB,yDAAW;AAC/B;;AAEA;AACA;;AAEA,aAAa;AACb;;AAEA;;AAEA;;AAKE;;;;;;;;;;;;;;;;;;ACrHkC;AACuB;AAClB;;;AAGzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2DAAe;AAClC;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,YAAY,uDAAW;AACvB;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA,8CAA8C,gBAAgB;AAC9D,SAAS;;AAET;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,yDAAW;AAC3B;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA,SAAS;;;;AAIT;AACA;AACA,gBAAgB,kDAAU;AAC1B,gBAAgB,kDAAU;AAC1B,gBAAgB,kDAAU;AAC1B,gBAAgB,kDAAU;AAC1B,gBAAgB,kDAAU;AAC1B;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;;AAIC;;;;;;;;;;;;;;;AClND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;;;;;;;;UCpBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA,YAAY,aAAa;AACuD;AACvC;AACF;;AAEvC,yDAAW;AACX","sources":["webpack://battleship/./src/game-manager.js","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/player.js","webpack://battleship/./src/ships.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["import { player } from \"./player\";\nimport { createShip } from \"./ships\";\nimport { createGameBoard } from \"./gameboard\";\n\nlet instance = null;\n\nexport default () => {\n    if (instance !== null) {\n        return instance;\n    }\n\n    instance = {\n        player1: player(document.getElementById(\"player1-controls\"), \"player1\"),\n        player2: player(document.getElementById(\"player2-controls\"), \"player2\"),\n        turn: 2,\n        \n\n        initialize: function () {\n            console.log(this.player1)\n            this.player1.initialize();\n            this.player2.initialize();\n        },\n\n        alternateTurns: function () {\n            if (this.turn === 1) {\n                this.turn = 2;\n                \n            } else {\n                this.turn = 1;\n                \n            }\n        },\n\n        turnOrder: function (playerObject) {\n            if (this.turn === 1) {\n                return this.player1 === playerObject;\n            } else {\n                return this.player2 === playerObject;\n            }\n        },\n\n        getPlayerTurnObject: function () {\n            if (this.turn === 1) {\n                return this.player1;\n            } else {\n                return this.player2;\n            }\n        },\n\n        recieveAttackGame: function (tileIndex) {\n            \n            let player = this.getPlayerTurnObject();\n            player.gameBoard.recieveAttack(1, tileIndex);\n            this.alternateTurns();\n            console.log(this.turn)\n        },\n\n        canStartGame: function () {\n            return !(this.player1.ships.filter(ship => ship.shipPlaced).length < 5\n                || this.player2.ships.filter(ship => ship.shipPlaced).length < 5);\n        },\n\n        hideShips: function () {\n           \n            this.player1.getGameBoard().querySelectorAll(\".ship-here\").forEach(element => {\n                element.classList.remove(\"ship-here\");\n            });\n            this.player2.getGameBoard().querySelectorAll(\".ship-here\").forEach(element => {\n                element.classList.remove(\"ship-here\");\n            });\n        },\n    };\n    return instance;\n}\n\n\n\n\n// export { startGame }\n\n\n\n\n\n\n\n","import { renderShips } from \"./player\";\nimport { createShip } from \"./ships\";\n// import { startGame } from \"./game-manager\";\n// import { player } from \"./player\";\nimport gameManager from \"./game-manager\";\n\nlet createGameBoard = () => {\n    return {\n        // player1Board: {},\n        // player2Board: {},\n\n        myBoard: [],\n        enemyBoard: [],\n\n\n\n        recieveAttack: function (player, tileIndex) {\n            //which board is being used//\n            // let board = player === 1 ? this.myBoard : this.enemyBoard\n            //check if a shot has been fired//\n            //if shot has been fired already there then do nothing//\n            // startGame();\n\n            let alreadyFired = this.shotFired(player, tileIndex);\n\n            let board = player === 1 ? this.myBoard : this.enemyBoard\n\n            let tile = board[tileIndex];\n\n            console.log(tileIndex)\n            if (alreadyFired) {\n                return;\n            }\n            //record value of shot in gameboard for player//\n            if (tile.ship) {\n                tile.isHit = true;\n                tile.ship.hit();\n                tile.tile.classList.add(\"hit\");\n\n                if (tile.ship.isSunk()) {\n                    console.log(\"Ship is Sunk!\");\n                }\n            } else {\n                tile.isMiss = true;\n                tile.tile.classList.add(\"miss\");\n            }\n\n            // if (!board[row]) {\n            //     board[row] = {}\n            // }\n        },\n\n        shotFired: function (player, tileIndex) {\n            //if player = 1 ?(is true/false) true take option 1 and false take option 2//\n            let board = player === 1 ? this.myBoard : this.enemyBoard\n\n            let tile = board[tileIndex];\n\n            return tile.isHit === true || tile.isMiss === true;\n        },\n\n    };\n}\n\nlet createTile = (gridTile, row, column) => {\n\n    return {\n        //tile is the element tile in the DOM created for the grid (it's what you hover over)//\n        tile: gridTile,\n        //isHit represents whether shot was fired and is a hit//\n        isHit: false,\n        //isMiss represents whether shot was fired and is a miss//\n        isMiss: false,\n        //ship is the ship object if the ship is in the tile//\n        ship: null,\n        //row is the x coord//\n        row: row,\n        //column is the y coord//\n        column: column,\n    };\n\n}\n\nfunction createGrids(gridElement, gameBoardObject, player) {\n\n    for (let r = 0; r < 10; r++) {\n\n        for (let c = 0; c < 10; c++) {\n            let tile = document.createElement(\"div\");\n            tile.classList.add(\"tile\");\n            gridElement.appendChild(tile);\n            let myGridTile = createTile(tile, r, c);\n            let enemyGridTile = createTile(tile, r, c);\n            gameBoardObject.myBoard.push(myGridTile);\n            gameBoardObject.enemyBoard.push(enemyGridTile);\n            tile.addEventListener(\"click\", () => {\n                let tileIndex = (r * 10) + c;\n                if (!gameManager().canStartGame()) {\n                    alert(\"place all boats on the boards\");\n                    return;\n                } else {\n                    gameManager().recieveAttackGame(tileIndex);\n                }\n\n                // let clickLocation = [r, c];\n                // console.log(clickLocation)\n\n            })\n        }\n\n    }\n\n}\n\nexport {\n    createGameBoard,\n    createGrids,\n};\n","import { createShip } from \"./ships\"\nimport { createGrids, createGameBoard } from \"./gameboard\";\nimport gameManager from \"./game-manager\";\n\n\nlet player = (rootElement, playerName) => {\n\n    return {\n        root: rootElement,\n        shipDragCurrent: null,\n        orientation: \"Horizontal\",\n        playerName: playerName,\n        ships: [],\n        gameBoard: createGameBoard(),\n        flipOrientation: function () {\n            if (this.orientation === \"Horizontal\") {\n                this.orientation = \"Vertical\";\n            } else {\n                this.orientation = \"Horizontal\";\n            }\n        },\n\n        initialize: function () {\n            this.bindOrientationButton();\n            this.ships = this.createShips(this.root.querySelector(\"#ship-options\"));\n            createGrids(this.getGameBoard(), this.gameBoard, this);\n            this.dragDropInitializer();\n        },\n\n        bindOrientationButton: function () {\n            let button = this.root.querySelector(\"#ship-orientation\");\n            button.addEventListener(\"click\", () => {\n                this.flipOrientation();\n                button.innerText = this.orientation;\n            });\n        },\n\n        getGameBoard() {\n            return document.getElementById(`${this.playerName}-gameboard`);\n        },\n\n        dragDropInitializer() {\n\n            let grid = this.getGameBoard();\n            let shipBank = this.root.querySelector(\"#ship-options\");\n\n            let tiles = grid.querySelectorAll(\".tile\");\n\n            tiles.forEach((tile, tileIndex) => {\n                tile.addEventListener(\"dragover\", (e) => {\n                    // console.log(getShip(e, ships))\n                    e.preventDefault();\n                    this.gridHoverOver(e, tileIndex, this.gameBoard);\n                });\n\n                tile.addEventListener(\"dragleave\", (e) => this.gridLeaveHover(e));\n\n                tile.addEventListener(\"drop\", (event) => {\n                    // console.log(\"drop\");\n                    event.preventDefault();\n                    this.shipDrop(event, tileIndex, this.getShip(event, this.ships));\n                    this.renderShips(shipBank, this.ships);\n                })\n            })\n        },\n\n        shipDragStart(e, shipIndex) {\n            // console.log(\"dragstart\");\n\n            e.dataTransfer.effectAllowed = \"all\";\n            e.dataTransfer.setData(\"ship\", shipIndex);\n            this.shipDragCurrent = shipIndex;\n            // console.log(shipIndex)\n        },\n\n        shipDrop(e, tileIndex, ship) {\n\n            ship.shipPlaced = true;\n            this.getValidTiles(e, tileIndex, ship, this.gameBoard).forEach((tile) => {\n                //places ship on multiple tiles, not just one tile//\n                tile.ship = ship;\n                tile.tile.classList.add(\"ship-here\");\n            })\n            let allShipsPlaced = this.ships.filter((ship) => ship.shipPlaced).length === 5;\n            if (allShipsPlaced) {\n                gameManager().hideShips();\n            }\n        },\n\n        gridHoverOver(e, tileIndex, gameBoard) {\n            e.preventDefault();\n            let ship = this.ships[this.shipDragCurrent];\n\n            //this will make sure all the valid tiles are highlighted//\n            // console.log(ship)\n            this.getValidTiles(e, tileIndex, ship, gameBoard).forEach((tile) => {\n                tile.tile.classList.add(\"ship-hover-marker\")\n                setTimeout(function() {\n                    tile.tile.classList.remove(\"ship-hover-marker\");\n                }, 500);\n            })\n        },\n\n        getValidTiles(e, tileIndex, ship, gameBoard) {\n            let tile = gameBoard.myBoard[tileIndex];\n            // console.log(tile);\n            let startIndex = tileIndex;\n            let endIndex = startIndex + ship.shipLength;\n            let offset = 0;\n\n            if (this.orientation === \"Horizontal\") {\n                let endRow = Math.floor(endIndex / 10);\n                if (endRow > tile.row) {\n                    offset = endIndex % 10;\n                    // console.log(offset);\n                }\n            } else {\n                let returnTiles = [];\n                let startRow = Math.floor(startIndex / 10);\n                let endRow = startRow + ship.shipLength;\n                if (endRow > 10) {\n                    offset = endRow - 10;\n                    startRow = startRow - offset;\n                    endRow = endRow - offset;\n                }\n                let columnValue = startIndex % 10;\n                for (let i = 0; i < ship.shipLength; i++) {\n                    let indexToGrab = (i * 10) + (startRow * 10) + columnValue;\n                    // console.log(indexToGrab)\n                    returnTiles.push(gameBoard.myBoard[indexToGrab]);\n                }\n                return returnTiles;\n            }\n\n            startIndex = startIndex - offset;\n            endIndex = endIndex - offset;\n            // let decimalValue = ((startIndex % 10) - Math.floor(startIndex));\n\n            // console.log(ship.shipLength);\n            // console.log(this.orientation);\n            // console.log(startIndex);\n            // console.log(endIndex);\n\n            // if (ship.shipLength === 5 && decimalValue === .6 && startIndex <= 95 || ship.shipLength === 4 && decimalValue === .7 && startIndex <= 96 || ship.shipLength === 3 && decimalValue === .8 && startIndex <= 97 || ship.shipLength === 2 && decimalValue === .9 && startIndex <= 98) {\n            //     // console.log(decimalValue);\n            //     return gameBoard.myBoard.slice(startIndex, endIndex);\n            // } else {\n            //     return [];\n            // }\n            return gameBoard.myBoard.slice(startIndex, endIndex);\n        },\n\n        gridLeaveHover(e) {\n            e.preventDefault();\n            this.getGameBoard().querySelectorAll(\".ship-hover-marker\").forEach((element) => {\n                element.classList.remove(\"ship-hover-marker\");\n            })\n        },\n\n        getShip(e, ships) {\n            //get data called ship, expect ship to be a number(index) and this number represents where in the array the ship is and it will return the ship object//\n\n            let shipIndex = e.dataTransfer.getData(\"ship\");\n            // console.log(shipIndex)\n            return ships[parseInt(shipIndex)];\n        },\n\n\n\n        createShips(element) {\n            let ships = [\n                createShip(\"Carrier\", 5),\n                createShip(\"Battleship\", 4),\n                createShip(\"Submarine\", 3),\n                createShip(\"Destroyer\", 3),\n                createShip(\"Patrol Boat\", 2),\n            ]\n            this.renderShips(element, ships);\n            return ships;\n        },\n\n        renderShips(element, ships) {\n            element.innerHTML = \"\";\n\n            ships.forEach((ship, shipIndex) => {\n                if (ship.shipPlaced === false) {\n                    let shipElement = document.createElement(\"div\");\n                    shipElement.innerText = ship.shipName;\n                    shipElement.classList.add(\"ship-element\");\n                    element.appendChild(shipElement);\n                    shipElement.setAttribute('draggable', true);\n                    shipElement.addEventListener(\"dragstart\", (e) => this.shipDragStart(e, shipIndex));\n                }\n            })\n        },\n    }\n}\n\n\n\n\n\n//computer selection//\nfunction getComputerChoice() {\n    let computerSelection = Math.floor(Math.random() * 100);\n    // return choices[computerSelection];\n}\n\nexport {\n    player\n}\n","//create the ship factory function//\n//all boats start with 0 hits and are floating//\nlet createShip = (name, length, row, column, orientation = \"Horizontal\", hits = 0) => {\n   return {\n      shipName: name,\n      shipLength: length,\n      shipRow: row,\n      shipColumn: column,\n      shipPlaced: false,\n      shipOrientation: orientation,\n      shipHits: hits,\n      hit: function () {\n         if (this.shipHits + 1 <= this.shipLength) {\n            this.shipHits++\n         }\n      },\n      isSunk: function () {\n         return this.shipHits >= this.shipLength\n      },\n   };\n}\n\nexport { createShip }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import { createShip } from \"./ships\";\nimport { createGrids, dragDropInitializer, createGameBoard } from \"./gameboard\";\nimport gameManager from \"./game-manager\";\nimport { createShips } from \"./player\";\n\ngameManager()\n    .initialize();\n\n\n\n\n\n\n\n\n"],"names":[],"sourceRoot":""}