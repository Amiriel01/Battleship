{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;;AAAqC;;AAErC;AACA;AACA,wBAAwB;AACxB,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,oBAAoB,QAAQ;AAC5B;AACA;AACA;;AAEA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;;AAEA;;AAEA,oBAAoB,QAAQ;AAC5B;AACA;AACA;;AAEA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB,QAAQ,kDAAU;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAOE;;;;;;;;;;;;;;;AC5HF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;;AAEA;AACA;;;;;;;;UCzBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA,YAAY,aAAa;AACwC;;AAEjE,uDAAW;AACX,uDAAW;AACX,uDAAW;AACX,oDAAQ","sources":["webpack://battleship/./src/gameboard.js","webpack://battleship/./src/ships.js","webpack://battleship/webpack/bootstrap","webpack://battleship/webpack/runtime/define property getters","webpack://battleship/webpack/runtime/hasOwnProperty shorthand","webpack://battleship/webpack/runtime/make namespace object","webpack://battleship/./src/index.js"],"sourcesContent":["import { createShip } from \"./ships\";\n\nlet gameBoard = () => {\n    return {\n        player1Board: {},\n        player2Board: {},\n\n        recieveAttack: function (player, row, column) {\n            //which board is being used//\n            let board = player === 1 ? this.player1Board : this.player2Board\n            //check if a shot has been fired//\n            //if shot has been fired already there then do nothing//\n            let alreadyFired = this.shotFired(player, row, column);\n            if (alreadyFired === null) {\n                return;\n            }\n            //record value of shot in gameboard for player//\n            if (!board[row]) {\n                board[row] = {}\n            }\n        },\n\n        shotFired: function (player, row, column) {\n            //if player = 1 ?(is true/false) true take option 1 and false take option 2//\n            let board = player === 1 ? this.player1Board : this.player2Board\n            // longer way to write it\n            // let board;\n            // if (player === 1) {\n            //     board = this.player1Board;\n            // } else {\n            //     board = this.player2Board;\n            // }\n            if (board[row]) {\n                if (board[row][column]) {\n                    let value = board[row][column];\n                    return value;\n                }\n            }\n            return null;\n        }\n    };\n}\n\nfunction createGrids() {\n    let grid1 = document.querySelector(\"#player1-gameboard\");\n\n    for (let r = 0; r < 10; r++) {\n        let rows1 = document.createElement(\"div\");\n        rows1.classList.add(\"row\")\n        grid1.appendChild(rows1);\n\n        for (let c = 0; c < 10; c++) {\n            let columns1 = document.createElement(\"div\");\n            columns1.classList.add(\"column\")\n            grid1.appendChild(columns1);\n        }\n    }\n\n    let grid2 = document.querySelector(\"#player2-gameboard\");\n\n    for (let r = 0; r < 10; r++) {\n        let rows2 = document.createElement(\"div\");\n        rows2.classList.add(\"row\")\n        grid2.appendChild(rows2);\n\n        for (let c = 0; c < 10; c++) {\n            let columns2 = document.createElement(\"div\");\n            columns2.classList.add(\"column\")\n            grid2.appendChild(columns2);\n        }\n    }\n}\n\nfunction dragDrop() {\n    let shipElement = document.querySelector(\".ship-element\");\n\n    shipElement.addEventListener(\"dragstart\", (event) => {\n        console.log(\"dragstart\");\n        event.dataTransfer.clearData();\n        event.dataTransfer.setData(\"text/plain\", event.target.id);\n    })\n\n    grid1.addEventListener(\"dragover\", (event) => {\n        console.log(\"dragover\");\n        event.preventDefault();\n    })\n    \n    grid1.addEventListener(\"drop\", (event) => {\n        console.log(\"drop\");\n        event.preventDefault();\n        event.dataTransfer.getData(\"text/plain\", shipElement);\n        if (event.target.id === \"#player1-gameboard\") {\n            shipElement.parentNode.removeChild(shipElement);\n            event.target.appendChild(shipElement);\n        }\n    })\n}\nfunction createShips(element) {\n    let ships = [\n        createShip(\"Carrier\", 5),\n        createShip(\"Carrier\", 5),\n        createShip(\"Battleship\", 4),\n        createShip(\"Battleship\", 4),\n        createShip(\"Submarine\", 3),\n        createShip(\"Submarine\", 3),\n        createShip(\"Destroyer\", 3),\n        createShip(\"Destroyer\", 3),\n        createShip(\"Patrol Boat\", 2),\n        createShip(\"Patrol Boat\", 2)\n    ]\n    ships.forEach((ship) => {\n        let shipElement = document.createElement(\"div\");\n        shipElement.innerText = ship.shipName;\n        shipElement.classList.add(\"ship-element\");\n        element.appendChild(shipElement);\n        shipElement.setAttribute('draggable', true);\n    })\n}\n\nexport {\n    gameBoard,\n    createGrids,\n    createShips,\n    dragDrop,\n};\n","//create the ship factory function//\n//all boats start with 0 hits and are floating//\nlet createShip = (name, length, row, column, hits = 0) => {\n   return {\n      shipName: name,\n      shipLength: length,\n      shipRow: row,\n      shipColumn: column,\n      shipHits: hits,\n      hit: function () {\n         if (this.shipHits + 1 <= this.shipLength) {\n            this.shipHits++\n         }\n      },\n      isSunk: function () {\n         return this.shipHits >= this.shipLength\n      },\n   };\n}\n\n// let shipOptions = document.querySelector(\".ship-options\")\n\n// createShip(\"Carrier\", 5);\n\n// let carrier = document.querySelector(\"#carrier\");\n// shipOptions.appendChild(carrier);\n\nexport { createShip }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import { createShip } from \"./ships\";\nimport { createGrids, createShips, dragDrop } from \"./gameboard\";\n\ncreateShips(document.getElementById(\"ship-options1\"));\ncreateShips(document.getElementById(\"ship-options2\"));\ncreateGrids();\ndragDrop();\n"],"names":[],"sourceRoot":""}